diff --git a/Makefile b/Makefile
index f8c820e..f76b3dc 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..4fdd392 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -693,3 +693,21 @@ procdump(void)
     printf("\n");
   }
 }
+
+int proc_count(void) {
+    struct proc *p;
+    int count = 0;
+    for (p = proc; p < &proc[NPROC]; p++) {
+        if (p->state != UNUSED) {
+            count++;
+        }
+    }
+    return count;
+}
+
+int
+memory_pages_above_threshold(struct proc *p) {
+    return PGROUNDUP(p->sz) / PGSIZE;
+}
+
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..d36682e 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int info_call_count;
+
 };
+
+
+int proc_count(void);
+int memory_pages_above_threshold(struct proc *p) ;
+
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..889af45 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -57,6 +57,7 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  
 }
 
 // Retrieve an argument as a pointer.
@@ -101,6 +102,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_info(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_info]    sys_info,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c463579 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_info   22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..b5e4167 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,26 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_info(void) {
+    int param;
+
+    argint(0, &param);
+
+    struct proc *p = myproc();
+    p->info_call_count++;
+
+    if (param == 1) {
+        return proc_count();
+    } else if (param == 2) {
+        return p->info_call_count;
+    } else if (param == 3) {
+        return memory_pages_above_threshold(p);
+    } else if (param == 4) {
+        return (uint64)p->kstack;
+    } else {
+        return -1;  
+    }
+}
+
diff --git a/user/user.h b/user/user.h
index f16fe27..e2ce9b5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int info(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..3388ba0 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("info");
